package com.crystalcube.android.doodledraw.ui;

import android.graphics.Color;
import android.test.ActivityInstrumentationTestCase2;
import android.view.View;
import android.view.ViewGroup;

import com.crystalcube.android.doodledraw.R;
import com.crystalcube.android.doodledraw.ui.view.MainActivity;
import com.crystalcube.android.doodledraw.ui.view.MainActivity_;
import com.crystalcube.android.doodledraw.ui.widgets.ColorPicker;
import com.crystalcube.android.doodledraw.ui.widgets.DoodleView;
import com.robotium.solo.Solo;

/**
 * <p>
 * Instrument test to test {@link com.crystalcube.android.doodledraw.ui.view.MainActivity} UI functionality.
 * We have bare underscore oddness beause we are testing extended component generated by AA. The actual
 * activity being launched is from manifest is MainActivity_, An extended class of MainActivity
 * </p>
 *
 * @author tanny
 *         Created: 11/09/15.
 */
public class MainActivityInstrumentTest extends ActivityInstrumentationTestCase2<MainActivity_> {


    private MainActivity activity;
    private Solo solo;

    public MainActivityInstrumentTest() {
        super(MainActivity_.class);
    }

    public void setUp() throws Exception {
        super.setUp();
        activity = getActivity();
        solo = new Solo(getInstrumentation(), activity);
    }

    /**
     * Test all UI components in  {@link MainActivity}. This test could be split in smaller tests
     * to achieve modularity.
     *
     * @throws Exception Any exception that will renders this test as failed.
     */
    public void testUiComponents() throws Exception {

        solo.waitForActivity(activity.getClass());
        solo.assertCurrentActivity("Current activity is not expected activity", MainActivity_.class);

        // Test that canvas view is there
        DoodleView canvas = (DoodleView) activity.findViewById(R.id.doodle_view);
        assertNotNull(canvas);

        // Test that color picker is in layout
        ColorPicker colorPicker = (ColorPicker) activity.findViewById(R.id.color_picker);
        assertNotNull(colorPicker);

        //Test that view layout contains two children and five item in each
        ViewGroup topRow = (ViewGroup) colorPicker.findViewById(R.id.palette_row_top);
        assertNotNull(topRow);
        assertEquals("The top row color items don't match", 5, topRow.getChildCount());

        ViewGroup bottomRow = (ViewGroup) colorPicker.findViewById(R.id.palette_row_bottom);
        assertNotNull(bottomRow);
        assertEquals("The bottom row color items don't match", 5, bottomRow.getChildCount());


        //Click on a color and test if it draw color DoodleView
        View redColor = topRow.getChildAt(4);
        solo.clickOnView(redColor);

        //Click is async operation wait while handler being executed
        Thread.sleep(500);

        assertEquals("The expected color doesn't match", Color.RED, canvas.getDrawColor());

    }

    public void tearDown() throws Exception {
        super.tearDown();
    }

}
